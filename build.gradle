plugins {
    id 'java'
    id 'application'
    id 'war'
    id 'idea'
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

import org.gradle.internal.os.OperatingSystem

project.ext.lwjglVersion = "3.2.2"

switch (OperatingSystem.current()) {
    case OperatingSystem.LINUX:
        project.ext.lwjglNatives = "natives-linux"
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = "natives-macos"
        break
    case OperatingSystem.WINDOWS:
        project.ext.lwjglNatives = "natives-windows"
        break
}

group 'sayner.sandbox'
version '1.1-SNAPSHOT'

sourceCompatibility = 1.8

mainClassName = 'sayner.sandbox.neuralG.App'

repositories {
    mavenCentral()
}

dependencies {

    // Apache library contains utility classes, stream implementations, file filters, file comparators, endian transformation classes, and much more.
    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'

    // Это потому, что я плохо матан учил
    // https://mvnrepository.com/artifact/org.joml/joml
    implementation group: 'org.joml', name: 'joml', version: '1.9.19'

    // LWJGL

    implementation "org.lwjgl:lwjgl:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-assimp:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-bgfx:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-cuda:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-egl:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-glfw:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-jawt:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-jemalloc:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-libdivide:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-llvm:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-lmdb:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-lz4:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-meow:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-nanovg:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-nfd:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-nuklear:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-odbc:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-openal:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-opencl:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-opengl:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-opengles:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-openvr:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-opus:$lwjglVersion"
    if (lwjglNatives == "natives-windows") implementation "org.lwjgl:lwjgl-ovr:$lwjglVersion" // because LibOVR is currently only available on Windows
    implementation "org.lwjgl:lwjgl-par:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-remotery:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-rpmalloc:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-sse:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-stb:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-tinyexr:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-tinyfd:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-tootle:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-vma:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-vulkan:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-xxhash:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-yoga:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-zstd:$lwjglVersion"
    runtimeOnly "org.lwjgl:lwjgl:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-bgfx:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-jemalloc:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-libdivide:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-llvm:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-lmdb:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-lz4:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-meow:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-nanovg:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-nfd:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-nuklear:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengles:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openvr:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opus:$lwjglVersion:$lwjglNatives"
    if (lwjglNatives == "natives-windows") runtimeOnly "org.lwjgl:lwjgl-ovr:$lwjglVersion:$lwjglNatives" // because LibOVR is currently only available on Windows
    runtimeOnly "org.lwjgl:lwjgl-par:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-remotery:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-rpmalloc:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-sse:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-tinyexr:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-tinyfd:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-tootle:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-vma:$lwjglVersion:$lwjglNatives"
    if (lwjglNatives == "natives-macos") runtimeOnly "org.lwjgl:lwjgl-vulkan:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-xxhash:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-yoga:$lwjglVersion:$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-zstd:$lwjglVersion:$lwjglNatives"

    // TEST

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

task fatJar(type: Jar) {
    archiveClassifier = 'fat'

    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath

    from {
        configurations.runtimeClasspath.findAll { it.getName() }.collect { zipTree(it) }
    }

    manifest {
        attributes(
                'Class-Path': configurations.compile.collect { it.getName() }.join(''),
                'Main-Class': 'sayner.sandbox.neuralG.App'
        )
    }
}
